# --- ProGuard Rules for .NET MAUI ---

# These rules prevent R8 from removing critical Java classes that the .NET runtime needs.

# Keep the main entry points of the application.
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends androidx.core.app.CoreComponentFactory
-keep public class * extends androidx.appcompat.app.AppCompatActivity

# Keep the MainApplication and MainActivity specifically
-keep public class com.yvanbrunel.dimmer.MainActivity { *; }
-keep public class com.yvanbrunel.dimmer.MainApplication { *; }

# Keep all members of classes used in XML layouts (e.g., custom views)
-keep public class * {
    public <init>(android.content.Context);
    public <init>(android.content.Context, android.util.AttributeSet);
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

# Preserve Java Callable Wrappers, which are the bridge between .NET and Java. This is CRITICAL.
-keep class mono.android.** { *; }

# Preserve essential AndroidX libraries that MAUI depends on.
-keep class androidx.lifecycle.** { *; }
-keep class androidx.appcompat.** { *; }
-keep interface androidx.appcompat.** { *; }

# If you use Google Material Design components
-keep class com.google.android.material.** { *; }
-keep interface com.google.android.material.** { *; }

# The following line can help with reflection issues from third-party libraries.
-keepattributes Signature,InnerClasses